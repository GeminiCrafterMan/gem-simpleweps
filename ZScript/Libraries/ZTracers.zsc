/*
	
	TRACER SYSTEM FOR ZSCRIPT 2.4 | APRIL 7TH 2017
	AUTHOR: (DENIS) BELMONDO
	
	USAGE: make a new class, inherit from _ZTracer and change the properties as
			 you wish.
	
	you may use this in your project. just leave this comment at the top of 
	this script and give credit please! thank you :^)
	
*/

class _ZTracer : FastProjectile
{

	const TRACERDURATION	= 1; // tics
	const TRACERFANCY		= 0; // fake bool
	const TRACERLENGTH		= 96.0; // float
	const TRACERSCALE		= 4.0; // float
	const TRACERSTEP		= 0.01; // float
	const TRACERFANCYSTEP	= 0.01; // float
	const TRACERACTOR		= "_ZTracerTrail"; // actor name

	float x1, y1, z1;
	float x2, y2, z2;

	// Cheers, themistercat!!
	static const Color greyColors[] =
	{
		color(80, 56, 56),
		color(104, 80, 80),
		color(128, 104, 104),
		color(144, 128, 128),
		color(160, 144, 144),
		color(192, 160, 160),
		color(192, 192, 192)
	};
	
	int mixColorR; property mixR: mixColorR;
	int mixColorG; property mixG: mixColorG;
	int mixColorB; property mixB: mixColorB;
	bool mixInvert; property invert: mixInvert;

	Color getBlend(int index, bool invertThis)
	{ 
		if(invertThis) { index = (greyColors.Size()-1)-index; }
		int r = (float(greyColors[index].r/256.0) * float(mixColorR/256.0))	* 256;
		int g = (float(greyColors[index].g/256.0) * float(mixColorG/256.0))	* 256;
		int b = (float(greyColors[index].b/256.0) * float(mixColorB/256.0))	* 256;
		return Color(r, g, b);
	}
	
	// literally just stole this from wikipedia
	float lerp(float v0, float v1, float t) {
		return (1 - t) * v0 + t * v1;
	}
	
	override void BeginPlay()
	{
		// we don't want to lerp into weird coordinates
		x1 = pos.x;
		y1 = pos.y;
		z1 = pos.z;
		
		x2 = pos.x;
		y2 = pos.y;
		z2 = pos.z;
	}
	
	override void Tick()
	{
	
		if (Level.isFrozen()) return; // Originally (level.frozen || globalfreeze)
		
		x1 = pos.x;
		y1 = pos.y;
		z1 = pos.z;
		
		x2 = pos.x + vel.x / GetDefaultSpeed("_ZTracer") * TRACERLENGTH;
		y2 = pos.y + vel.y / GetDefaultSpeed("_ZTracer") * TRACERLENGTH;
		z2 = pos.z + vel.z / GetDefaultSpeed("_ZTracer") * TRACERLENGTH;
		
		if (TRACERFANCY == 0)
		{
			for(float i = 0; i < 1; i += TRACERSTEP) {
				A_SpawnParticle (
					getBlend(clamp(i * greyColors.Size(), 0, greyColors.Size() - 1), mixInvert),
					SPF_FULLBRIGHT,
					TRACERDURATION,
					TRACERSCALE * i,
					0,
					(-pos.x) + lerp(x1, x2, i),
					(-pos.y) + lerp(y1, y2, i),
					(-pos.z) + lerp(z1, z2, i),
					0, 0, 0,
					0, 0, 0,
					1.0
				);
			} 
		}
		else
		{
			for(float i = 0; i < 1; i += TRACERFANCYSTEP) {
				A_SpawnItemEx (
					TRACERACTOR,
					(-pos.x) + lerp(x1, x2, i),
					(-pos.y) + lerp(y1, y2, i),
					(-pos.z) + lerp(z1, z2, i),
					0, 0, 0, 0,
					SXF_ABSOLUTEPOSITION
				);
			}
		}

		Super.Tick();
	}
	
}

extend class _ZTracer
{
	Default {
		DamageFunction (3 * Random(1, 5));
		Height 1;
		Radius 1;
		Speed 60;
		+BLOODSPLATTER;
	}
	States {
		Spawn:
			TNT1 A 1;
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("BulletPuff");
		XDeath:
			TNT1 A -1 A_Jump(256, "Null");
			Stop;
	}
}

class _ZTracerTrail : Actor
{
	Default {
		Alpha 0.5;
		RenderStyle "Add";
		Scale 0.25;
		+NOINTERACTION;
	}
	States {
		Spawn:
			PUFF A 2 Bright;
			TNT1 A -1 A_Jump(256, "Null");
			Stop;
	}
}