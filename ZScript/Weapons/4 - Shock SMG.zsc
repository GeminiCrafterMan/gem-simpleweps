// Shock SMG
// It's an SMG, but the tracers are blue.
// Holds 60 shots in the mag, since it's a battery-powered weapon.
class GSW_ShockSMGAmmo : Ammo
{
	Default
	{
		Inventory.Icon "IBATA0";
		Inventory.Amount 0;
		Inventory.MaxAmount 60;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 60; // Oops! Forgot to set this to 60.
		+INVENTORY.IGNORESKILL
	}
}
class GSW_ShockSMG : GSW_Weapon replaces Chaingun // Make a spawner when you finish the laser minigun
{
	Default
	{
		+WEAPON.AMMO_OPTIONAL
		//+WEAPON.NOALERT
		Weapon.SlotNumber 4;
		Weapon.AmmoType1 "GSW_ShockSMGAmmo";
		Weapon.AmmoUse 1;
		Weapon.AmmoGive1 0;
		Weapon.AmmoType2 "GSW_SMGBattery";
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive2 60;

		Tag "$TAG_SHOCKSMG";
		Obituary "$KILLSHOCKSMG";
		Inventory.PickupMessage "$GOTSHOCKSMG";

		Weapon.UpSound "weapons/shocksmg/draw";
		Inventory.PickupSound "weapons/shocksmg/pickup";
		AttackSound "weapons/shocksmg/fire";
		
		Decal "BulletChip"; // temp
		DamageType "Bullet";
	}
	States
	{
		Spawn:
			SSMG Z -1;
			Stop;
		Select:
			SSMG A 1 A_Raise(18);
			Loop;
		Deselect:
			SSMG A 1 A_Lower(18);
			Loop;
		Ready:
			SSMG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Fire:
			SSMG A 0 A_JumpIfNoAmmo("FireEmpty");
			SSMG A 2 {
				A_Overlay(-2, "Flash");
				A_OverlayAlpha(-2, 0.33);
				A_OverlayFlags(-2, PSPF_ALPHA|PSPF_RENDERSTYLE, true);
				A_OverlayRenderStyle(-2, STYLE_ColorAdd);
				A_FireBullets(2, 2, 1, 16, "GSW_EnergyPuff", FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ, missile: "GSW_EnergyTracer", -2, 7.5);
				A_StartSound("weapons/shocksmg/fire_back", volume: 0.5);
			}
			SSMG B 1;
			SSMG A 0 A_ReFire;
			SSMG C 2;
			Goto Ready;
		FireEmpty:
			TNT1 A 0 A_JumpIfInventory("GSW_SMGBattery", 1, "Reload");
			SSMG C 2 A_StartSound("weapons/shocksmg/empty");
			SSMG A 8;
			Goto Ready;
		Reload:
		// Check for battery, and if you're already full.
			TNT1 A 0 A_JumpIfInventory("GSW_ShockSMGAmmo", 0, "Ready");
			TNT1 A 0 A_JumpIfInventory("GSW_SMGBattery", 1, 1);
			Goto Ready;
			SSMG DEF 2;
			SSMG G 2 A_StartSound("weapons/shocksmg/close", CHAN_AUTO);
			SSMG H 2;
			SSMG I 2 A_StartSound("weapons/shocksmg/bat_out", CHAN_AUTO);
			SSMG JKLMNOP 2;
			SSMG Q 2 A_StartSound("weapons/shocksmg/bat_in", CHAN_AUTO);
		Reload.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("GSW_ShockSMGAmmo", 0, "Reload.Finish");
			TNT1 A 0 A_JumpIfInventory("GSW_SMGBattery", 1, 1);
			Goto Reload.Finish;
			TNT1 A 0 {
				A_GiveInventory("GSW_ShockSMGAmmo", 1);
				A_Takeinventory("GSW_SMGBattery",1);
			}
			Goto Reload.Repeat;
		Reload.Finish:
			SSMG RST 2;
			SSMG U 2 A_StartSound("weapons/shocksmg/close", CHAN_AUTO);
			SSMG VW 2;
			Goto Ready;
		Flash:
			SSMF A 1 Bright A_AttachLightDef("Flash", "GSW_ShockFlash");
			SSMF B 1 Bright;
			SSMF B 0 A_RemoveLight("Flash");
			Stop;
	}
}
class GSW_EnergyTracer : GSW_BulletTracer
{
	Default
	{
		_ZTracer.mixR 192;
		_ZTracer.mixG 256;
		_ZTracer.mixB 256;
	}
}
class GSW_EnergyPuff : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+PUFFONACTORS
		RenderStyle "Add";
		Alpha 0.5;
		Translation "0:255=%[0,0,0.75]:[0.75,1,1]";
	}
	States
	{
		Spawn:
			CPUF ABCDEFG 3 Bright;
			Stop;
	}
}