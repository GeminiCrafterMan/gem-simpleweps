// "Pummeler" Pump Shotgun
// A high-power shotgun.
// Holds 8 shots in the mag, and one more in the chamber. Reflect this in the reload from empty!
class GSW_PummelerAmmo : Ammo
{
	Default
	{
		Inventory.Icon "PUMGQ0";
		Inventory.Amount 0;
		Inventory.MaxAmount 9;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 9;
		+INVENTORY.IGNORESKILL
	}
}
class GSW_PummelerSlugs : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
class GSW_PummelerPoison : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
class GSW_PummelerFrag : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
}
class GSW_Pummeler : GSW_Weapon replaces Shotgun
{
	int curShellType;
	enum ShellTypes
	{
		Shell_Buckshot,
		Shell_Slug,
		Shell_Poison,
		Shell_Frag
	}
	action void A_FirePummeler()
	{
		switch (invoker.curShellType) {
			case GSW_Pummeler.Shell_Buckshot:
				A_FireBullets(4, 4, 10, 15, flags: FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ, missile: "GSW_BulletTracer", -2.5, 7.5);
				A_StartSound("weapons/pummeler/fire", CHAN_WEAPON);
				break;
			case GSW_Pummeler.Shell_Slug:
				A_StartSound("weapons/pummeler/debug", CHAN_WEAPON);
				break;
			case GSW_Pummeler.Shell_Poison:
				A_StartSound("weapons/pummeler/debug", CHAN_WEAPON);
				break;
			case GSW_Pummeler.Shell_Frag:
				A_StartSound("weapons/pummeler/debug", CHAN_WEAPON);
				break;
			default:
				A_StartSound("weapons/pummeler/debug", CHAN_WEAPON);
				break;
		}
	}
	Default
	{
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.NOALERT
		Weapon.SlotNumber 3;
		Weapon.AmmoType1 "GSW_PummelerAmmo";
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 0;
		Weapon.AmmoType2 "Shell";
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive2 4;

		Tag "$TAG_PUMMELER";
		Obituary "$KILLPUMMELER";
		Inventory.PickupMessage "$GOTPUMMELER";

		Weapon.UpSound "weapons/pummeler/draw";
		Inventory.PickupSound "weapons/pummeler/pickup";
		
		Decal "BulletChip";
		DamageType "Shotgun";
	}
	States
	{
		Spawn:
			PUMG Z -1;
			Stop;
		Select:
			PUMG A 1 A_Raise(18);
			Loop;
		Deselect:
			PUMG A 1 A_Lower(18);
			Loop;
		Ready:
			PUMG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Fire:
			PUMG A 0 A_AlertMonsters; // So you don't alert them by swapping ammo types -- reload doesn't alert monsters anyway so pistol doesn't have this
			PUMG A 0 A_JumpIfNoAmmo("FireEmpty");
			PUMG A 2 {
				A_FirePummeler();
				A_Overlay(-2, "Flash");
			}
			PUMG BCCAAAA 2; // Recoil
			PUMG E 2; // Pump, ejecting the last shell if you're empty
			PUMG F 6 A_StartSound("weapons/pummeler/pumpin");
			PUMG E 2;
			PUMG A 8 A_StartSound("weapons/pummeler/pumpout");
			PUMG A 4 A_ReFire;
			Goto Ready;
		FireEmpty:
			TNT1 A 0 A_JumpIfInventory("Shell", 1, "ReloadEmpty");
			PUMG A 10 A_StartSound("weapons/pummeler/empty");
			Goto Ready;
		ReloadEmpty:
			PUMG GHIJ 2;
		ReloadEmpty.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("GSW_PummelerAmmo", invoker.ammo1.MaxAmount - 1, "ReloadEmpty.Finish");
			// if at least 1 shell to load, continue
			TNT1 A 0 A_JumpIfInventory("Shell", 1, 1);
			Goto ReloadEmpty.Finish;
			PUMG KLM 2;
			// exchange shell for ammo
			TNT1 A 0 {
				A_GiveInventory("GSW_PummelerAmmo", 1);
				A_Takeinventory("Shell",1);
			}
			PUMG N 2 A_StartSound("weapons/pummeler/load");
			PUMG OOPP 1 A_JumpIf(IsPressed(BT_ATTACK), "ReloadEmpty.Finish");
			Goto ReloadEmpty.Repeat;
		ReloadEmpty.Finish:
			PUMG JIHG 2;
			PUMG E 2; // Pump, but only if you're empty
			PUMG F 6 A_StartSound("weapons/pummeler/pumpin");
			PUMG E 2;
			PUMG A 8 A_StartSound("weapons/pummeler/pumpout");
			Goto Ready;

		Reload:
		// Check for shells, and if you're already full.
			TNT1 A 0 A_JumpIfInventory("GSW_PummelerAmmo", 0, "Ready");
			TNT1 A 0 A_JumpIfNoAmmo("ReloadEmpty");
			TNT1 A 0 A_JumpIfInventory("Shell", 1, 1);
			Goto Ready;
			PUMG GHIJ 2;
		Reload.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("GSW_PummelerAmmo", 0, "Reload.Finish");
			// if at least 1 shell to load, continue
			TNT1 A 0 A_JumpIfInventory("Shell", 1, 1);
			Goto Reload.Finish;
			PUMG KLM 2;
			// exchange shell for ammo
			TNT1 A 0 {
				A_GiveInventory("GSW_PummelerAmmo", 1);
				A_Takeinventory("Shell",1);
			}
			PUMG N 2 A_StartSound("weapons/pummeler/load");
			PUMG OOPP 1 A_WeaponReady(WRF_NOBOB); // Quickly get out of reloading by firing a shot
			Goto Reload.Repeat;
		Reload.Finish:
			PUMG JIHG 2;
			Goto Ready;
		AltFire: // Cycle through owned shells
			// Use the ShellTypes enum, owned shell types (items) and that int up there to determine what type you're on
			// ChangeAmmoIcon1("PUMGS0");
			PUMG GHIJ 2;
		AltHold:
			PUMG KLM 2;
			PUMG N 2 {
				A_StartSound("weapons/pummeler/load");
				switch (invoker.curShellType) {
					case GSW_Pummeler.Shell_Buckshot:
						invoker.curShellType = GSW_Pummeler.Shell_Slug;
						ChangeAmmoIcon1("PUMGR0");
						break;
					case GSW_Pummeler.Shell_Slug:
						invoker.curShellType = GSW_Pummeler.Shell_Poison;
						ChangeAmmoIcon1("PUMGS0");
						break;
					case GSW_Pummeler.Shell_Poison:
						invoker.curShellType = GSW_Pummeler.Shell_Frag;
						ChangeAmmoIcon1("PUMGT0");
						break;
					case GSW_Pummeler.Shell_Frag:
						invoker.curShellType = GSW_Pummeler.Shell_Buckshot;
						ChangeAmmoIcon1("PUMGQ0");
						break;
				}
				/*
				if (invoker.curShellType = GSW_Pummeler.Shell_Frag)
				{
					invoker.curShellType = GSW_Pummeler.Shell_Buckshot;
					ChangeAmmoIcon1("PUMGQ0");
				}
				//else if (invoker.curShellType = GSW_Pummeler.Shell_Buckshot && owner.FindInventory("GSW_PummelerSlugs")) // ...no clue how to continue this
				*/
			}
			PUMG OP 2;
			PUMG A 0 A_ReFire;
			PUMG JIHG 2;
			Goto Ready;
		Flash:
			PUMF A 1 Bright A_AttachLightDef("Flash", "GSW_GunFlash");
			PUMF B 1 Bright;
			PUMF B 0 A_RemoveLight("Flash");
			Stop;
	}
}