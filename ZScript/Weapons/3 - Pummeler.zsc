// "Pummeler" Pump Shotgun
// A high-power shotgun.
// Holds 8 shots in the mag, and one more in the chamber. Reflect this in the reload from empty!
// First, though, define a spawner for those upgrades that replaces the Backpack.
class GSW_PummelerRandom : RandomSpawner replaces Backpack
{
	override void BeginPlay()
	{
		Super.BeginPlay();
		A_SpawnItemEx("GSW_Backpack");
	}
	Default
	{
		DropItem "GSW_PummelerSlug";
		//DropItem "GSW_PummelerPoison"; // Disabled spawning Poison chip for now, since it doesn't work how I want it to.
		DropItem "GSW_PummelerFrag";
	}
}
class GSW_PummelerChip : Inventory
{
	Default
	{
		Height 48;
		+FLOATBOB;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		+INVENTORY.IGNORESKILL
	}
	States
	{
		Spawn:
			IPUM ABCDEFGGFEDCB 2;
			Loop;
	}
}
class GSW_PummelerSlug : GSW_PummelerChip
{
	Default
	{
		Inventory.PickupMessage "$GOTPUMMELERSLUG";
	}
	States
	{
		Spawn:
			IPUM HIJKLFGGFLKJH 2;
			Loop;
	}
}
class GSW_PummelerPoison : GSW_PummelerChip
{
	Default
	{
		Inventory.PickupMessage "$GOTPUMMELERPOISON";
	}
	States
	{
		Spawn:
			IPUM MNOPQFGGFQPON 2;
			Loop;
	}
}
class GSW_PummelerFrag : GSW_PummelerChip
{
	Default
	{
		Inventory.PickupMessage "$GOTPUMMELERFRAG";
	}
	States
	{
		Spawn:
			IPUM RSTUVFGGFVUTS 2;
			Loop;
	}
}

class GSW_PummelerAmmo : Ammo
{
	Default
	{
		Inventory.Icon "IPUMA0";
		Inventory.Amount 0;
		Inventory.MaxAmount 9;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 9;
		+INVENTORY.IGNORESKILL
	}
}
class GSW_Pummeler : GSW_Weapon replaces Shotgun
{
	int curShellType;
	enum ShellTypes
	{
		Shell_Buckshot,
		Shell_Slug,
		Shell_Poison,
		Shell_Frag
	}
	static const Name AmmoTypes[] = { 'GSW_Pummeler', 'GSW_PummelerSlug', 'GSW_PummelerPoison', 'GSW_PummelerFrag' };
	static const String AmmoIcons[] = { "IPUMA0", "IPUMH0", "IPUMM0", "IPUMR0" };
	action void SwitchToAmmo(int ammoToSwitch)
	{
		int breakcount = 0;
		while(true)
		{
			if (invoker.owner.CountInv(invoker.AmmoTypes[ammoToSwitch]) > 0)
			{
					invoker.curShellType = ammoToSwitch;
					ChangeAmmoIcon1(invoker.AmmoIcons[invoker.curShellType]);
					break;
			}
			else
			{
					ammoToSwitch = (ammoToSwitch+1)%(invoker.AmmoTypes.Size());
					breakcount++;
			}
			//console.printf("ammotype %i", invoker.curShellType);
			if(breakcount > 4) { break; }
		}
	}
	action void A_FirePummeler()
	{
		switch (invoker.curShellType) {
			case GSW_Pummeler.Shell_Buckshot:
				A_FireBullets(4, 4, 10, 15, flags: FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ, missile: "GSW_BulletTracer", -2.5, 7.5);
				A_StartSound("weapons/pummeler/fire", CHAN_WEAPON);
				break;
			case GSW_Pummeler.Shell_Slug:
				A_FireBullets(0, 0, 1, 150, flags: FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ, missile: "GSW_BulletTracer", -2.5, 7.5);
				A_StartSound("weapons/pummeler/fire-slug", CHAN_WEAPON);
				break;
			case GSW_Pummeler.Shell_Poison:
				A_FireBullets(8, 8, 10, 2, flags: FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ, missile: "GSW_PoisonTracer", -2.5, 7.5);
				A_StartSound("weapons/pummeler/fire", CHAN_WEAPON);
				break;
			case GSW_Pummeler.Shell_Frag:
				A_FireBullets(0, 0, 1, 0, flags: FBF_USEAMMO|FBF_NORANDOM|FBF_NORANDOMPUFFZ, missile: "GSW_FragTracer", -2.5, 7.5);
				A_StartSound("weapons/pummeler/fire-slug", CHAN_WEAPON);
				break;
			default:
				A_StartSound("debug", CHAN_WEAPON);
				break;
		}
	}
	Default
	{
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.NOALERT
		Weapon.SlotNumber 3;
		Weapon.AmmoType1 "GSW_PummelerAmmo";
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 0;
		Weapon.AmmoType2 "Shell";
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive2 4;

		Tag "$TAG_PUMMELER";
		Obituary "$KILLPUMMELER";
		Inventory.PickupMessage "$GOTPUMMELER";

		Weapon.UpSound "weapons/pummeler/draw";
		Inventory.PickupSound "weapons/pummeler/pickup";
		
		Decal "BulletChip";
		DamageType "Shotgun";
	}
	States
	{
		Spawn:
			PUMG Z -1;
			Stop;
		Select:
			PUMG A 1 A_Raise(18);
			Loop;
		Deselect:
			PUMG A 1 A_Lower(18);
			Loop;
		Ready:
			PUMG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Fire:
			PUMG A 0 A_AlertMonsters; // So you don't alert them by swapping ammo types -- reload doesn't alert monsters anyway so pistol doesn't have this
			PUMG A 0 A_JumpIfNoAmmo("FireEmpty");
			PUMG A 2 {
				A_FirePummeler();
				A_Overlay(-2, "Flash");
			}
			PUMG BCCAAAA 2; // Recoil
			PUMG E 2; // Pump, ejecting the last shell if you're empty
			PUMG F 6 A_StartSound("weapons/pummeler/pumpin");
			PUMG E 2;
			PUMG A 7 A_StartSound("weapons/pummeler/pumpout");
			PUMG A 4 A_ReFire;
			Goto Ready;
		FireEmpty:
			TNT1 A 0 A_JumpIfInventory("Shell", 1, "ReloadEmpty");
			PUMG A 10 A_StartSound("weapons/pummeler/empty");
			Goto Ready;
		ReloadEmpty:
			PUMG GHIJ 2;
		ReloadEmpty.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("GSW_PummelerAmmo", invoker.ammo1.MaxAmount - 1, "ReloadEmpty.Finish");
			// if at least 1 shell to load, continue
			TNT1 A 0 A_JumpIfInventory("Shell", 1, 1);
			Goto ReloadEmpty.Finish;
			PUMG KLM 2;
			// exchange shell for ammo
			TNT1 A 0 {
				A_GiveInventory("GSW_PummelerAmmo", 1);
				A_Takeinventory("Shell",1);
			}
			PUMG N 2 A_StartSound("weapons/pummeler/load");
			PUMG OOPP 1 A_JumpIf(IsPressed(BT_ATTACK), "ReloadEmpty.Finish");
			Goto ReloadEmpty.Repeat;
		ReloadEmpty.Finish:
			PUMG JIHG 2;
			PUMG E 2; // Pump, but only if you're empty
			PUMG F 6 A_StartSound("weapons/pummeler/pumpin");
			PUMG E 2;
			PUMG A 7 A_StartSound("weapons/pummeler/pumpout");
			Goto Ready;

		Reload:
		// Check for shells, and if you're already full.
			TNT1 A 0 A_JumpIfInventory("GSW_PummelerAmmo", 0, "Ready");
			TNT1 A 0 A_JumpIfNoAmmo("ReloadEmpty");
			TNT1 A 0 A_JumpIfInventory("Shell", 1, 1);
			Goto Ready;
			PUMG GHIJ 2;
		Reload.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("GSW_PummelerAmmo", 0, "Reload.Finish");
			// if at least 1 shell to load, continue
			TNT1 A 0 A_JumpIfInventory("Shell", 1, 1);
			Goto Reload.Finish;
			PUMG KLM 2;
			// exchange shell for ammo
			TNT1 A 0 {
				A_GiveInventory("GSW_PummelerAmmo", 1);
				A_Takeinventory("Shell",1);
			}
			PUMG N 2 A_StartSound("weapons/pummeler/load");
			PUMG OOPP 1 A_WeaponReady(WRF_NOBOB); // Quickly get out of reloading by firing a shot
			Goto Reload.Repeat;
		Reload.Finish:
			PUMG JIHG 2;
			Goto Ready;
		AltFire: // Cycle through owned shells
			PUMG GHIJ 2;
		AltHold:
			PUMG KLM 2;
			PUMG N 2 {
				A_StartSound("weapons/pummeler/load");
				invoker.SwitchToAmmo((invoker.curShellType+1)%(invoker.AmmoTypes.Size()));
			}
			PUMG OP 2;
			PUMG A 0 A_ReFire;
			PUMG JIHG 2;
			Goto Ready;
		Flash:
			PUMF A 1 Bright A_AttachLightDef("Flash", "GSW_GunFlash");
			PUMF B 1 Bright;
			PUMF B 0 A_RemoveLight("Flash");
			Stop;
	}
}

class GSW_PoisonTracer : GSW_BulletTracer
{
	Default
	{
		_ZTracer.mixR 256;
		_ZTracer.mixG 48;
		_ZTracer.mixB 256;
	}
	States
	{
		XDeath:
		Death:
			TNT1 A 0 {
				A_Stop();
				A_SpawnProjectile("GSW_PoisonCloud", 0, flags: CMF_AIMDIRECTION|CMF_TRACKOWNER);
				A_SpawnProjectile("GSW_PoisonCloud", 0, flags: CMF_AIMDIRECTION|CMF_TRACKOWNER);
				//A_SpawnItemEx("GSW_PoisonCloud", angle: random(-15, 15), flags: SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS);
				//A_SpawnItemEx("GSW_PoisonCloud", angle: random(-15, 15), flags: SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS);
			}
			Stop;
	}
}
class GSW_PoisonCloud : Actor
{
	Default
	{
		+RIPPER
		+NOGRAVITY
		+RANDOMIZE
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		//+FLOATBOB
		Radius 16;
		Height 32;
		Alpha 0.75;
		RenderStyle "Translucent";
		DamageType "Poison";
		DamageFunction 0; // Required to make the cloud poison anything
		Projectile;
		BounceFactor 1;
		PoisonDamage 20, 20;
		ReactionTime 210; // 6 seconds
		Obituary "$KILLPUMMELERPOISON";
	}
	States
	{
		Spawn:
			PUMP ABCD 2;
			Goto SpawnLoop;
		SpawnLoop:
			PUMP EF 2 A_Countdown; // should become 12 seconds
			Loop;
		Death:
			PUMP DCBA 2;
			Stop;
	}
}

class GSW_FragTracer : GSW_BulletTracer
{
	Default
	{
		_ZTracer.mixR 128;
		_ZTracer.mixG 128;
		_ZTracer.mixB 128;
		DeathSound "effects/explosion_small";
		Obituary "$KILLPUMMELERFRAG";
		+DEHEXPLOSION
		+ZDOOMTRANS
	}
	States
	{
		XDeath:
		Death:
			TNT1 A 0 {
				A_Explode();
				A_SpawnItemEx("GSW_Explosion");
			}
			Stop;
	}
}